import asyncio
import sqlite3
import json
import datetime
from time import sleep
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ParseMode
from apscheduler.schedulers.asyncio import AsyncIOScheduler

logging.basicConfig(level=logging.INFO)

API_TOKEN = '' #YOUR TOKEN HERE

bot = Bot(token = API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start', 'start@chat_birthday_bot'])
async def start_message(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç ‚úåÔ∏è\n–¢–µ–ø–µ—Ä—å –≤–∞—à —á–∞—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–æ—Ç—É!\n')

@dp.message_handler(commands=['help', 'help@chat_birthday_bot'])
async def help_message(message: types.Message):
    await message.answer('–≠—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –î–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π –≤ —á–∞—Ç–µ\n\n–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥\n/help@chat_birthday_bot - –≤—ã–≤–µ—Å—Ç–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n/add_birth –¥–∞—Ç–∞ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü\n/del_birth - —É–¥–∞–ª–∏—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–≤–æ–µ–º –î–†\n/imhere - –¥–æ–±–∞–≤–∏—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–≤–æ–µ–º –î–† –≤ —ç—Ç–æ–º —á–∞—Ç–µ')

@dp.message_handler(commands=['imhere', 'imhere@chat_birthday_bot'])
async def add_chat(message: types.Message):
	with open('usernames.json', "r") as f:
		file = json.load(f)
	if str(message.from_user.id) in file:
		if not(str(message.chat.id) in file[str(message.from_user.id)]["chats"]):
			file[str(message.from_user.id)]["chats"].append(str(message.chat.id))
		else:
			await message.answer('–ü–æ—Ö–æ–∂–µ —Ç—ã —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–∞—Ö —ç—Ç–æ–≥–æ —á–∞—Ç–∞')
			return
	else:
		await message.answer('–ë–æ—Ç –µ—â–µ –Ω–µ –∑–Ω–∞–µ—Ç –¥–∞—Ç—É —Ç–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è :(')
		return
	with open('usernames.json', "w") as f:
		json.dump(file, f)

@dp.message_handler(commands=['add_birth', 'add_birth@chat_birthday_bot'])
async def add_birth(message: types.Message):
	msg = message.text.split(' ')[1].split('.')
	if not(msg[0].isdigit() and msg[1].isdigit() and int(msg[0]) < 32 and int(msg[1]) < 13):
		await message.answer('–¢—ã —á—Ç–æ-—Ç–æ –Ω–∞–≤—Ä–∞–ª, —Ç–∞–∫–æ–π –¥–∞—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å')
		return
	msg[0] = str(int(msg[0]))
	msg[1] = str(int(msg[1]))
	date = msg[0] + '.' + msg[1]
	d = datetime.date.today()
	date1 = str(d.day) + '.' + str(d.month)
	if date == date1:
	    await bot.send_message(message.chat.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –î–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è @' + str(message.from_user.username) + '!üéâ\n\n–ñ–µ–ª–∞–µ–º –µ–º—É(–µ–π) –≤—Å–µ–≥–æ —Å–∞–º–æ–≥–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ!üéâ\n\n–°–µ—Ä–¥–µ—á–∫–∏ –¥–ª—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞(—Ü—ã) –≤ —Å—Ç—É–¥–∏—é!‚ù§Ô∏è')
	with open('birthdays.json', "r") as f:
		data = json.load(f)
	if not(date in data):
		await message.answer('–¢—ã —á—Ç–æ-—Ç–æ –Ω–∞–≤—Ä–∞–ª, —Ç–∞–∫–æ–π –¥–∞—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å')
		return
	with open('usernames.json', "r") as f:
		file = json.load(f)
	if not(str(message.from_user.id) in file):
		list = []
		list.append(str(message.chat.id))
		file.update({str(message.from_user.id) : {"name" : message.from_user.username, "chats" : list}})
	else:
	    data[file[str(message.from_user.id)]["date"]].remove(str(message.from_user.id))
	data[date].append(str(message.from_user.id))
	with open('birthdays.json', "w") as f:
		json.dump(data, f)
	file[str(message.from_user.id)].update({"date" : date})
	with open('usernames.json', "w") as f:
		json.dump(file, f)
	await message.reply('–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª —Ç–µ–±—è!')

@dp.message_handler(commands=['del_birth', 'del_birth@chat_birthday_bot'])
async def del_birth(message: types.Message):
	with open('usernames.json') as f:
		file_names = json.load(f)
	with open('birthdays.json') as f:
		file = json.load(f)
	if not(str(message.from_user.id) in file_names):
		await message.answer('–¢—ã —á—Ç–æ-—Ç–æ –Ω–∞–≤—Ä–∞–ª, —Ç–µ–±—è –ø–æ—Ö–æ–∂–µ –∏ –Ω–µ –±—ã–ª–æ')
		return
	file[file_names[str(message.from_user.id)]["date"]].remove(str(message.from_user.id))
	del file_names[str(message.from_user.id)]
	with open('usernames.json', 'w') as f:
		json.dump(file_names, f)
	with open('birthdays.json', 'w') as f:
		json.dump(file, f)
	await message.reply('–£–¥–∞–ª–∏–ª —Ç–µ–±—è, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –µ—â–µ :(')

async def sending():
	d = datetime.date.today()
	date = str(d.day) + '.' + str(d.month)
	with open('birthdays.json') as f:
		file = json.load(f)
	with open('usernames.json') as f:
		usernames = json.load(f)
	for user in file[date]:
		for chat in usernames[user]["chats"]:
			await bot.send_message(chat, '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –î–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è @' + usernames[user]["name"] + '!üéâ\n\n–ñ–µ–ª–∞–µ–º –µ–º—É(–µ–π) –≤—Å–µ–≥–æ —Å–∞–º–æ–≥–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ!üéâ\n\n–°–µ—Ä–¥–µ—á–∫–∏ –¥–ª—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞(—Ü—ã) –≤ —Å—Ç—É–¥–∏—é!‚ù§Ô∏è')
	if date == '1.3' and d.year % 4 != 0:
		date = '29.2'
		with open('birthdays.json') as f:
			file = json.load(f)
		with open('usernames.json') as f:
			usernames = json.load(f)
		for user in file[date]:
			for chat in usernames[user]["chats"]:
				await bot.send_message(chat, '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –î–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è @' + usernames[user]["name"] + '!üéâ\n\n–ñ–µ–ª–∞–µ–º –µ–º—É(–µ–π) –≤—Å–µ–≥–æ —Å–∞–º–æ–≥–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ!üéâ\n\n–°–µ—Ä–¥–µ—á–∫–∏ –¥–ª—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞(—Ü—ã) –≤ —Å—Ç—É–¥–∏—é!‚ù§Ô∏è')

if __name__ == '__main__':
	sched = AsyncIOScheduler()
	sched.add_job(sending, 'cron', hour='10')
	sched.start()
	executor.start_polling(dp, skip_updates=True)
